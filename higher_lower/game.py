"""
Initial explanation:
-----------------------------Higher Or Lower-----------------------------
Inspiration: 
This game is basically inspired from the online higher or lower game, in which the user can play the game and guess the number of searches for a particular topic. 

Basic Rules:- 
If the guessed answer (only 2 options, higher or lower), is right, your score will be incremented by 1, and the game continues ahead. Otherwise the game is over, and final score is displayed. 
Here if you guess the correct one, you have to compare the next one to this one's number of guesses. 

Modification:
Here instead of searches, we are comparing the number of followers. 

Example output:
    __  ___       __             
   / / / (_)___ _/ /_  ___  _____
  / /_/ / / __ `/ __ \/ _ \/ ___/
 / __  / / /_/ / / / /  __/ /    
/_/ ///_/\__, /_/ /_/\___/_/     
   / /  /____/_      _____  _____
  / /   / __ \ | /| / / _ \/ ___/
 / /___/ /_/ / |/ |/ /  __/ /    
/_____/\____/|__/|__/\___/_/     

Compare A: Ellen DeGeneres, a Comedian, from United States.

 _    __    
| |  / /____
| | / / ___/
| |/ (__  ) 
|___/____(_)

Against B: Jennifer Lopez, a Musician and actress, from United States.
Who has more followers? Type 'A' or 'B':

If right:
  / / / (_)___ _/ /_  ___  _____
  / /_/ / / __ `/ __ \/ _ \/ ___/
 / __  / / /_/ / / / /  __/ /    
/_/ ///_/\__, /_/ /_/\___/_/     
   / /  /____/_      _____  _____
  / /   / __ \ | /| / / _ \/ ___/
 / /___/ /_/ / |/ |/ /  __/ /    
/_____/\____/|__/|__/\___/_/     

You're right! Current score: 1. --- the change
Compare A: BeyoncÃ©, a Musician, from United States.

 _    __    
| |  / /____
| | / / ___/
| |/ (__  ) 
|___/____(_)

Against B: 9GAG, a Social media platform, from China.
Who has more followers? Type 'A' or 'B':

"""

'''
Explanation generated by ChatGPT:
This code is a simple command-line game where the player is asked to guess which of two randomly-selected people has more followers on Instagram. The code imports several required modules and defines two functions, select_random() and game_logic().

The select_random() function chooses a random person from a provided data list. It does so by generating a random index within the range of the data list, retrieving the person object associated with that index, and returning the selected person object.

The game_logic() function manages the logic of the game. It initializes a score of 0, initializes two empty dictionaries for person1 and person2, and sets a flag called continue_game to True. It then enters a loop that continues until continue_game is False.

Within the loop, the console screen is cleared and the game logo is displayed. If the score is 0, two random people are selected and compared. If the score is greater than or equal to 1, the current score is displayed and the previous person2 is set as person1 before selecting a new person2 to compare.

The details of the two people to be compared are displayed, and the player is prompted to enter their answer. The code checks if the user's answer is correct and updates the score accordingly. If the user's answer is incorrect, the continue_game flag is set to False and the final score is displayed.

The main() function simply calls the game_logic() function. Finally, the if __name__ == '__main__': block ensures that main() is only called if the code is run directly, rather than being imported as a module by another program.
'''

# import required modules
import random
import data
import art
import os


def select_random():
    '''define function to select a random person from the data list'''
    # select a random index within the range of the data list
    selected_index = random.randint(0, len(data.data) - 1)

    # retrieve the person object associated with the selected index
    selected_person = data.data[selected_index]

    # return the selected person object
    return selected_person


def game_logic():
    '''define function to select a random person from the data list'''
    # initialize score to 0
    score = 0

    # initialize empty dictionaries for person1 and person2
    person1 = {}
    person2 = {}

    # initialize continue_game flag to True
    continue_game = True

    # loop until continue_game is False
    while continue_game:
        # clear the console screen
        os.system('cls')

        # display the game logo
        print(art.logo)

        # if the score is 0, select two random people
        if score == 0:
            person1 = select_random()
            person2 = select_random()

            # ensure that person2 is not the same as person1
            while person2 == person1:
                person2 = select_random()

        # if the score is greater than or equal to 1, display the current score and set person1 to person2
        elif score >= 1:
            print(f"You're right! Your current score is {score}")
            person1 = person2
            person2 = select_random()

            # ensure that person2 is not the same as person1
            while person2 == person1:
                person2 = select_random()

        # display the details of the two people to be compared
        print(
            f"Compare A: {person1['name']}, a {person1['description']}, from {person1['country']}.")
        print(art.vs)
        print(
            f"Against B: {person2['name']}, a {person2['description']}, from {person2['country']}.")

        # prompt the user to enter their answer
        answer = input("Who has more followers? Type 'A' or 'B': ").lower()

        # check if the user's answer is correct and update the score accordingly
        if (answer == "a" and person1["follower_count"] > person2["follower_count"]) or (answer == "b" and person1["follower_count"] < person2["follower_count"]):
            score += 1

        # if the user's answer is incorrect, set continue_game to False and display the final score
        else:
            continue_game = False
            os.system('cls')
            print(art.logo)
            print(f"Sorry, that's wrong. Final score: {score}")


def main():
    game_logic()


if __name__ == '__main__':
    main()
